/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dijkstra_router.view;

import dijkstra_router.model.Chaine;
import dijkstra_router.model.Dijkstra;
import dijkstra_router.model.GenericNode;
import dijkstra_router.model.Graph;
import dijkstra_router.model.Map;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author 626
 */
public class Fenetre extends javax.swing.JFrame {

    public Fenetre() {
        // panel contenant la MAP 
        jPanel1 = new JPanel(new GridLayout(19, 48, 0, 0));
        // Variable de stockage des coordonnées d'arrivé et de départet du nombre de ligne et de colonne

        //listVariable.put("ligne", 0);
        //listVariable.put("colonne", 0);
        /*arrive1 = "";
         arrive2 = "";
         depart1 = "";
         depart2 = "";
         */
        ligne = colonne = 0;
        initListVar();
        mapSize();
        setMap(null);
        running = false;
        initComponents();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    /**
     * *
     * Affects the speed desired in the range defined
     *
     * @return Execution speed
     */
    
    /***
     * initialize all global variables
     */
    private void initListVar() {
        listSouris = new Chaine();
        listVarString.put("depart1", "");
        listVarString.put("depart2", "");
        listVarString.put("arrive1", "");
        listVarString.put("arrive2", "");
        listVarInt.put("nbSourisG", 0);
        listVarInt.put("nbSourisD", 0);
        listVarInt.put("nbSouris", 0);
        listVarInt.put("i", 0);
        listVarInt.put("actuel", 0);
        listVarInt.put("arrivees", 0);
        listVarInt.put("j", 0);
    }

    /***
     * initialize speed of excecution
     * @return speed of excecution
     */
    private int initSpeed() {
        int resSpeed = 0;
        String vitesse = jTextField3.getText();
        try {
            resSpeed = Integer.parseInt(vitesse);
            if (resSpeed < 300) {
                jTextField3.setText("300");
                resSpeed = 300;
            }
        } catch (NumberFormatException e) {
            System.err.println("vitesse incorrecte");
            jTextField3.setText("300");
        }
        return resSpeed;
    }

    /***
     * initialize the right number of mouses
     */
    private void initMouse() {
        try {
            if (!jTextField1.getText().equals("")) {
                listVarInt.put("nbSourisG", Integer.parseInt(jTextField1.getText()));
            } else {
                listVarInt.put("nbSourisG", 0);
            }
            if (!jTextField2.getText().equals("")) {
                listVarInt.put("nbSourisD", Integer.parseInt(jTextField2.getText()));
            } else {
                listVarInt.put("nbSourisD", 0);
            }
        } catch (NumberFormatException e) {
            System.err.println("Pas de souris entree");
        }
        listVarInt.put("nbSouris", listVarInt.get("nbSourisG") + listVarInt.get("nbSourisD"));
    }

    /***
     * Find the horizontal value of start
     */
    private void getHorizontalAxis() {
        int y = 0, y2 = 0;
        try {
            y = Integer.parseInt(listVarString.get("depart1").split(":")[1]);
        } catch (NumberFormatException e) {
            System.err.println(" depart 1 incorrect");
        }
        try {
            y2 = Integer.parseInt(listVarString.get("depart2").split(":")[1]);
        } catch (NumberFormatException e) {
            System.err.println(" depart 2 incorrect");
        }

        for (int iG = 0; iG < listVarInt.get("nbSourisG"); iG++) {
            GenericNode souris = null;

            if (y > y2) {
                souris = graph.getNode(listVarString.get("depart1"));
            } else {
                souris = graph.getNode(listVarString.get("depart2"));
            }

            listSouris.push(souris);
        }

        for (int iD = 0; iD < listVarInt.get("nbSourisD"); iD++) {
            GenericNode souris = null;
            if (y > y2) {
                souris = graph.getNode(listVarString.get("depart2"));
            } else {
                souris = graph.getNode(listVarString.get("depart1"));
            }

            listSouris.push(souris);
        }
    }

    /***
     * Check if a mouse can spawn
     * @param depart
     * @return true if she can not, false she is can
     */
    private boolean checkMouse(GenericNode depart) {
        if (!graph.poPornoT(depart)) {
            listVarInt.put("actuel", listVarInt.get("actuel") + 1);
            if (listVarInt.get("actuel") == listSouris.size()) {
                listVarInt.put("actuel", 0);
            }
            return true;
        }
        return false;
    }

    /***
     * Say if the mouse must wait
     * @param depart node of mouse
     * @return false if the mouse can move, true she must skip her turn
     */
    private boolean skipHerTurn(GenericNode depart) {
        if (depart.getValue().equals("wall")
                && depart.isHerbe()) {
            depart.setHerbe(false);
            listVarInt.put("i", listVarInt.get("i") + 1);
            listVarInt.put("actuel", listVarInt.get("actuel") + 1);
            if (listVarInt.get("actuel") == listSouris.size()) {
                listVarInt.put("actuel", 0);
            }
            return true;
        }
        return false;
    }

    /***
     * Remove mouse when she is arrived
     * @param depart node of mouse
     * @param arriveOne node of end
     * @param arriveTwo node of end
     */
    private void endMouse(GenericNode depart, GenericNode arriveOne, GenericNode arriveTwo) {
        listVarInt.put("arrivees", listVarInt.get("arrivees") + 1);
        arriveOne.setValue("Sortie");
        arriveTwo.setValue("Sortie");
        jLabelValeurSourisArrivees.setText(Integer
                .toString(listVarInt.get("arrivees")));
        if (listVarInt.get("actuel") > 0) {
            listVarInt.put("actuel", listVarInt.get("actuel") - 1);;
        }

        listSouris.remove(depart);
        revalidate();

    }

    private void initComponents() {

        // jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelTours = new javax.swing.JLabel();
        jLabelDeplacements = new javax.swing.JLabel();
        jLabelSourisEnDeplacement = new javax.swing.JLabel();
        jLabelSourisArrivees = new javax.swing.JLabel();
        jLabelValeurTours = new javax.swing.JLabel();
        jLabelValeurDeplacements = new javax.swing.JLabel();
        jLabelValeurSourisArrivees = new javax.swing.JLabel();
        jLabelValeurSourisEnDeplacement = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        /*
         * javax.swing.GroupLayout jPanel1Layout = new
         * javax.swing.GroupLayout(jPanel1); jPanel1.setLayout(jPanel1Layout);
         * jPanel1Layout.setHorizontalGroup(
         * jPanel1Layout.createParallelGroup(javax
         * .swing.GroupLayout.Alignment.LEADING) .addGap(0, 0, Short.MAX_VALUE)
         * ); jPanel1Layout.setVerticalGroup(
         * jPanel1Layout.createParallelGroup(javax
         * .swing.GroupLayout.Alignment.LEADING) .addGap(0, 380,
         * Short.MAX_VALUE) );
         */
        jPanel2.setBackground(new java.awt.Color(220, 220, 220));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("Lancer");
        jButton1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // si le jeu est en cours on l'arrete
                if (running) {
                    try {
                        Thread.sleep(1000);
                        // t.interrupt();
                        running = false;
                    } catch (InterruptedException ex) {
                        Thread.currentThread().interrupt();
                    }
                    jButton1.setText("Lancer");
                    jLabelValeurTours.setText("0");
                    jLabelValeurSourisEnDeplacement.setText("0");
                    jLabelValeurDeplacements.setText("0");
                    jLabelValeurSourisArrivees.setText("0");
                    initListVar();
                    setMap(null);
                } else {
                    t = new Thread() {
                        @Override
                        public void run() {

                            initListVar();
                            setMap(null);
                            graph.initGraph("./ressources/map.txt");
                            // init vitesse de jeu
                            int speed = initSpeed();
                            // init souris
                            initMouse();
                            // récupérration des position en Y des point de départ
                            getHorizontalAxis();
                            // variable d'exécution 
                            GenericNode depart = null;
                            GenericNode arriveOne = graph.getNode(listVarString.get("arrive1"));
                            GenericNode arriveTwo = graph.getNode(listVarString.get("arrive2")), arrive = null;
                            arriveOne.setValue("Sortie");
                            arriveTwo.setValue("Sortie");

                            while (!listSouris.isEmpty()) {
                                if (!running) {
                                    break;
                                }

                                depart = listSouris.get(listVarInt.get("actuel"));
                                // tant que la souris n'est pas arrivée
                                while (depart != arriveOne && depart != arriveTwo) {
                                    if (!running) {
                                        break;
                                    }
                                    // méthode de vérification l'apparrition de souris 
                                    if (checkMouse(depart)) {
                                        break;
                                    }
                                    // Si on est sur lherbe on passe 1 tour 
                                    if (skipHerTurn(depart)) {
                                        break;
                                    }
                                    // on redonne au node sa valeeur d'origine 
                                    depart.setValue(depart.getOldValue());
                                    // création des Edges
                                    graph.initEdge(ligne, colonne);
                                    //  Calcul du chemin le plus cours 
                                    arrive = Dijkstra.findeBestWay(depart);
                                    // parcours du chemin pour avancer
                                    while (arrive.previous.previous != null
                                            && !arrive.previous.getKey()
                                            .equals(depart.getKey())) {
                                        arrive = arrive.previous;
                                    }

                                    arrive.previous = null;

                                    //Sauvegarde de l'ancien nom du node 
                                    arrive.setOldValue(arrive.getValue());

                                    // vérification si node == herbe
                                    if (arrive.getValue().equals("grass")) {
                                        arrive.setHerbe(true);
                                    }

                                    // affectation en Waal car case actuelelment occupé 
                                    arrive.setValue("wall");

                                    depart = arrive;

                                    listSouris.set(listVarInt.get("actuel"), depart);

                                    setMap(listSouris);

                                    revalidate();

                                    try {
                                        TimeUnit.MILLISECONDS.sleep(speed);
                                    } catch (InterruptedException ex) {
                                        Logger.getLogger(
                                                Fenetre.class.getName()).log(
                                                        Level.SEVERE, null, ex);
                                    }
                                    listVarInt.put("j", listVarInt.get("j") + 1);
                                    if (listVarInt.get("actuel") == 0) {
                                        listVarInt.put("i", listVarInt.get("i") + 1);
                                    }
                                    jLabelValeurTours.setText(Integer
                                            .toString(listVarInt.get("i")));
                                    jLabelValeurSourisEnDeplacement.setText(Integer
                                            .toString(listSouris.size()));
                                    jLabelValeurDeplacements.setText(Integer.toString(listVarInt.get("j")));

                                    listVarInt.put("actuel", listVarInt.get("actuel") + 1);

                                    if (listVarInt.get("actuel") == listSouris.size()) {
                                        listVarInt.put("actuel", 0);
                                    }
                                    break;
                                }

                                // Traitement des souris arrivées
                                if (depart == arriveOne || depart == arriveTwo)
                                    endMouse(depart, arriveOne, arriveTwo);
                            }
                            try {
                                Thread.sleep(1000);
                                running = false;
                            } catch (InterruptedException ex) {
                                Thread.currentThread().interrupt();
                            }
                            jButton1.setText("Lancer");
                            jLabelValeurTours.setText("0");
                            jLabelValeurSourisEnDeplacement.setText("0");
                            jLabelValeurDeplacements.setText("0");
                            jLabelValeurSourisArrivees.setText("0");
                            setMap(null);
                            revalidate();
                        }
                    };
                    t.start();
                    running = true;
                    jButton1.setText("Stop");
                }

            }
        });
        jLabelDeplacements.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelDeplacements.setText("Deplacements");

        jLabelValeurDeplacements.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelValeurDeplacements.setText("0");

        jLabelTours.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelTours.setText("Tours");

        jLabelValeurTours.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelValeurTours.setText("0");

        jLabelSourisEnDeplacement.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelSourisEnDeplacement.setText("Souris en deplacement");

        jLabelValeurSourisEnDeplacement.setFont(new java.awt.Font("Tahoma", 0,
                14));
        jLabelValeurSourisEnDeplacement.setText("0");

        jLabelSourisArrivees.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelSourisArrivees.setText("Souris arrivees");

        jLabelValeurSourisArrivees.setFont(new java.awt.Font("Tahoma", 0, 14));
        jLabelValeurSourisArrivees.setText("0");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Porte 1");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Porte 2");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Vitesse");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
                jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout
                .setHorizontalGroup(jPanel2Layout
                        .createParallelGroup(
                                javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(
                                javax.swing.GroupLayout.Alignment.TRAILING,
                                jPanel2Layout
                                .createSequentialGroup()
                                .addContainerGap(582, Short.MAX_VALUE)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jLabelTours,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                35,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(
                                                jLabelValeurTours,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                40,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 100)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jLabelDeplacements,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                85,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(
                                                jLabelValeurDeplacements,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                40,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jLabelValeurSourisEnDeplacement,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                35,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(
                                                jLabelSourisEnDeplacement,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                139,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jLabelValeurSourisArrivees,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                35,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(
                                                jLabelSourisArrivees,
                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                40,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(66, 66, 66)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jLabel1,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                71,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jTextField1))
                                .addGap(36, 36, 36)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jTextField2)
                                        .addComponent(
                                                jLabel2,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                78,
                                                Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jTextField3)
                                        .addComponent(
                                                jLabel3,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                80,
                                                Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(
                                        jButton1,
                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                        77,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap()));
        jPanel2Layout
                .setVerticalGroup(jPanel2Layout
                        .createParallelGroup(
                                javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(
                                javax.swing.GroupLayout.Alignment.TRAILING,
                                jPanel2Layout
                                .createSequentialGroup()
                                .addContainerGap(24, Short.MAX_VALUE)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jLabelDeplacements,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabelSourisArrivees,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabelSourisEnDeplacement,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabelTours,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabel2,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabel3,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabel1,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE))
                                .addPreferredGap(
                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(
                                        jPanel2Layout
                                        .createParallelGroup(
                                                javax.swing.GroupLayout.Alignment.LEADING,
                                                false)
                                        .addComponent(
                                                jLabelValeurDeplacements,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabelValeurSourisArrivees,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabelValeurSourisEnDeplacement,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jLabelValeurTours,
                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(
                                                jTextField3)
                                        .addComponent(
                                                jTextField1)
                                        .addComponent(
                                                jTextField2)
                                        .addComponent(
                                                jButton1,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                42,
                                                Short.MAX_VALUE))
                                .addContainerGap()));
        jPanel2.setMaximumSize(new Dimension(498, 100));
        jPanel2.setMinimumSize(new Dimension(488, 100));
        jPanel2.setPreferredSize(jPanel2.getMinimumSize());
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
                getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2,
                        javax.swing.GroupLayout.Alignment.TRAILING,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(
                        layout.createSequentialGroup()
                        .addComponent(jPanel1,
                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(
                                javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2,
                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(
                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                Short.MAX_VALUE)));
        setMaximumSize(new java.awt.Dimension(981, 481));
        setMinimumSize(new java.awt.Dimension(980, 480));
        jLabel1.setForeground(Color.DARK_GRAY);
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14));

    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jTextField1ActionPerformed

    public void setMap(Chaine souris) {
        if (jPanel1 != null) {
            jPanel1.removeAll();
        }
        carte = new Map();
        JLabel labels[] = new JLabel[(ligne * colonne)];
        String bufferMap = carte.lire("./ressources/map.txt");

        int x = 0, y = 0;

        for (int i = 0, j = 0; i < bufferMap.length(); i++) {

            String s = x + ":" + y;
            ImageIcon grassIcon = null;
            if (bufferMap.charAt(i) != '\n') {
                if (bufferMap.charAt(i) == '*') {
                    grassIcon = new ImageIcon("./images/mur.png");
                    labels[j] = new JLabel(grassIcon);
                }
                if (bufferMap.charAt(i) == ' ' || bufferMap.charAt(i) == 'P') {
                    grassIcon = new ImageIcon("./images/sol.png");
                    labels[j] = new JLabel(grassIcon);
                }
                if (bufferMap.charAt(i) == 'A') {
                    // affectation des coordonnées des sorties
                    if (listVarString.get("arrive2").isEmpty()) {
                        listVarString.put("arrive2", s);
                    } else {
                        listVarString.put("arrive1", s);
                    }
                    grassIcon = new ImageIcon("./images/arrive.png");
                    labels[j] = new JLabel(grassIcon);
                }
                if (bufferMap.charAt(i) == 'G') {
                    grassIcon = new ImageIcon("./images/herbe.png");
                    labels[j] = new JLabel(grassIcon);
                }
                if (bufferMap.charAt(i) == 'D') {
                    // affectation des coordonées des point de départ
                    if (listVarString.get("depart2").isEmpty()) {
                        listVarString.put("depart2", s);

                    } else {
                        listVarString.put("depart1", s);
                    }
                    grassIcon = new ImageIcon("./images/porte.png");
                    labels[j] = new JLabel(grassIcon);
                }
                if (souris != null) {
                    for (GenericNode souri : souris) {
                        if (souri.getKey().equals(s)) {
                            grassIcon = new ImageIcon("./images/souris.png");
                            labels[j] = new JLabel(grassIcon);
                        }
                    }
                }
                labels[j] = new JLabel(grassIcon);
                jPanel1.add(labels[j]);

                j++;
                x++;
            } else {
                y++;
                x = 0;
            }
        }
    }

    public void mapSize() {
        carte = new Map();
        JLabel labels[] = new JLabel[(19 * 49)];
        String bufferMap = carte.lire("./ressources/map.txt");

        for (int i = 0, j = 0; i < bufferMap.length(); i++) {
            if (bufferMap.charAt(i) != '\n') {
                colonne = i;
            }
            ligne++;
        }
    }

    private javax.swing.JLabel jLabelValeurDeplacements;
    private javax.swing.JLabel jLabelValeurSourisEnDeplacement;
    private javax.swing.JLabel jLabelValeurSourisArrivees;
    private javax.swing.JLabel jLabelValeurTours;
    private JLabel jLabelSourisArrivees;
    private JLabel jLabelSourisEnDeplacement;
    private JLabel jLabelDeplacements;
    private JLabel jLabelTours;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private static javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private static Map carte;
    private static boolean running;
    private static Thread t;
    //private String depart1, depart2, arrive1, arrive2;
    private int ligne, colonne;
    private HashMap<String, String> listVarString = new HashMap<String, String>();
    private HashMap<String, Integer> listVarInt = new HashMap<String, Integer>();
    private Chaine listSouris = new Chaine();
    private Graph graph = new Graph();
}
